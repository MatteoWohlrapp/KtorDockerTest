swagger: "2.0"
info:
  description: 'Documentation of the sportify backend.'
  version: "0.1.0"
  title: "Sportify"
  contact:
    email: "marco.seidel@envidual.com"
host: "sportify.envidual.com"
schemes:
- "https"
tags:
  - name: "Scores"
  - name: "Users"
  - name: "Competitions"
paths:
  /scores:
    get:
      tags:
        - "Scores"
      summary: "Get highscores of users for every exercise"
      parameters:
        - name: "exerciseName"
          in: "query"
          type: "string"
          description: "Only the selected exercise"
        - name: "timestamp"
          in: "query"
          type: "integer"
          format: "int64"
          description: "Only scores which were saved after a perticular time"
        - name: "highscore"
          in: "query"
          type: "boolean"
          description: "All or only the highest scores for the respective exercises"
      responses:
        "200":
          description: "List aquired"
          schema:
            type: array
            items:  
              $ref: "#/definitions/Score"     
    put:
      tags:
        - "Scores"
      summary: "Post a new score"
      parameters:
        - name: "body"
          in: "body"
          schema:
            $ref: "#/definitions/Score"
      responses:
        "201":
          description: "Score got created"
        "400":
          description: "Bad request"

  /scores/{userId}:
      get:
        tags:
          - "Scores"
        summary: "Get highscores of specified user for a given exercise"
        parameters:
          - name: "exerciseId"
            in: "query"
            type: "integer"
            format: "int64"
            description: "Only the selected exercise"
          - name: "timestamp"
            in: "query"
            type: "integer"
            format: "int64"
            description: "Only scores which were saved after a perticular time"
          - name: "highscore"
            in: "query"
            type: "boolean"
            description: "All or only the highest scores for the respective exercises"
        responses:
          "200":
            description: "List aquired"
            schema:
              type: array
              items:  
                $ref: "#/definitions/Score"     

  /users:
    get:
      tags:
        - "Users"
      summary: "Get a list of specified users"
      parameters:
        - name: "ids"
          in: "query"
          type: "array"
          items:
            type: "integer"
            format: "uint64"
          description: "The identifiers of the searched users"
      responses:
        "200":
          description: "Users aquired"
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/User"
    post:
      tags:
        - "Users"
      summary: "Register a new user"
      parameters:
        - name: "body"
          in: "body"
          schema:
            type: "object"
            properties: 
              nickname:
                type: "string"
      responses:
        "201":
          description: "User created"
        "204":
          description: "No response"

  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get one specific user"
      responses:
        "200":
          description: "User found"
          schema:
            $ref: "#/definitions/User"



  /competitions:
    get:
      tags:
        - "Competitions"
      summary: "Get a list of specified users"
      parameters:
        - name: "ids"
          in: "query"
          type: "array"
          items:
            type: "integer"
            format: "uint64"
          description: "The identifiers of the searched users"
        - name: "timestamp"
          in: "query"
          type: "integer"
          format: "uint64"
          description: "Only the competitions after the timestamp"
        
      responses:
        "200":
          description: "Competitions aquired"
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/Competitions"

    post:
      tags:
        - "Competitions"
      summary: "Create new Competition"
      parameters:
        - name: "body"
          in: "body"
          schema:
            type: "object"
            properties: 
              userOneId:
                type: "integer"
                format: "uint64"
              userTwoId: 
                type: "integer"
                format: "uint64"
      responses:
        "201":
          description: "User created"
        "204":
          description: "No response"
    
  /competitions/{userId}:
    get:
        tags:
          - "Competitions"
        summary: "Get a list of all competitions for a specified user"
        parameters:
          - name: "ids"
            in: "query"
            type: "array"
            items:
              type: "integer"
              format: "uint64"
            description: "The identifiers of the searched users"
        responses:
          "200":
            description: "Users aquired"
            schema:
              type: "array"
              items: 
                $ref: "#/definitions/Competition"


definitions:
  User:
    type: "object"
    properties: 
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"

  Score:
    type: "object"
    properties: 
      scoreId: 
        type: "integer"
        format: "uint64"
      userId:
        type: "integer"
        format: "uint64" 
      timestamp:
        type: "integer"
        format: "uint64"
      exerciseId:
        type: "integer"
        format: "uint8"
      score:
        type: "integer"
        format: "uint16"

  Competition: 
    type: "object"
    properties: 
      competitionId:
        type: "integer"
        format: "uint64"
      userOneId: 
        type: "integer"
        format: "uint64"
      userTwoId: 
        type: "integer"
        format: "uint64"
      games: 
        type: "array"
        items: 
          $ref: "#/definitions/Score"

  Competitions: 
    type: "object"
    properties: 
      competitionId:
        type: "integer"
        format: "uint64"
      userOneId: 
        type: "integer"
        format: "uint64"
      userTwoId: 
        type: "integer"
        format: "uint64"
      creationTimestamp: 
        type: "integer"
        format: "uint64"

      
        
  